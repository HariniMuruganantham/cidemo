name: Backend CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # ===========================
  # 🧪 1. Run Backend Tests
  # ===========================
  test:
    name: Run Backend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U test_user -d test_db"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/test_db

    steps:
      - name: 🧩 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: 🕓 Wait for PostgreSQL to start
        run: |
          echo "Waiting for PostgreSQL to become ready..."
          sleep 10

      - name: 🚀 Run Pytest
        run: |
          pytest -v --maxfail=1 --disable-warnings

  # ===========================
  # 🔍 2. Security Scan (Trivy)
  # ===========================
  security_scan:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    needs: test  # Only run after tests pass

    steps:
      - name: 🧩 Checkout code
        uses: actions/checkout@v4

      - name: 🛡️ Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: fs
          ignore-unfixed: true
          format: table
          exit-code: 0
          output: trivy-report.txt

      - name: 📤 Upload Trivy Report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-report
          path: trivy-report.txt
